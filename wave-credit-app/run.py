from h2o_wave import Q, ui, app, main, data
from driverless_connect import DriverlessPredict
import pandas as pd, os.path
from views import *


@app('/')
async def serve(q: Q):
    if q.args.predict:
        await update_dashboard(q)
    else:
        await show_homepage(q)


async def show_homepage(q: Q):
    if q.client.initialise is None:
            
        ######## all logics / preprocessing goes here #########
        input_path = 'datasets/Credit_Scoring_Dataset-test.csv'
        q.user.dataset = pd.read_csv(input_path).fillna(0)
        customer_ids = list(q.user.dataset['CustomerID'])[:10]

        if not os.path.isfile('datasets/credit_predictions.csv'):
            dp = DriverlessPredict(config = {"username" : "", "password" : "", "experiment_key" : "", "address" : ""})
            predictions = dp.dai_predict(input_path = input_path)
        else:
            predictions = pd.read_csv("datasets/credit_predictions.csv")

        q.user.dataset = pd.concat([q.user.dataset, predictions], axis=1)
        target_col = [_ for _ in q.user.dataset.columns if ".1" in _][0]
        q.user.dataset['prediction'] = q.user.dataset[target_col]
        q.user.dataset = q.user.dataset.dropna()

        q.user.fe = pd.read_csv("datasets/feature_importance.txt").dropna()
        q.user.about_text = 'This score and the dashboard is generated by driverless-ai model in which the past \
        	The training dataset contains credit details of about 250,000 borrowers along with the target column - if they managed to repay the loan or not.' 
        ######## all logics / preprocessing ends here #########

        q.page['header']  = add_header_card(box = '1 1 11 1')
        q.page['sidebar'] = add_sidebar_card(box = '1 2 2 -1', customer_ids = customer_ids)
        q.page['content'] = add_text_card(box = '3 2 9 -1', text = "")
        q.client.initialise = True
    await q.page.save()


async def update_dashboard(q: Q):
    customer_record = q.user.dataset[q.user.dataset['CustomerID'] == q.args.customer_id].iloc(0)[0]

    q.page['content'] = add_text_card(box = '3 2 9 1', text = "Credit Score for CustomerID: " + str(q.args.customer_id)) 

    q.page['row11'] = add_gauge_card(box='3 3 1 2', key = 'Credit Score', value = 1-customer_record['prediction'])
    q.page['row12'] = add_stat_card(box = '4 3 2 2', key = 'MonthlyIncome', value = customer_record['MonthlyIncome'])
    q.page['row13'] = add_stat_card(box = '6 3 2 2', key = 'Age', value = customer_record['Age'])
    q.page['row14'] = add_stat_card(box = '8 3 2 2', key = 'DebtRatio', value = customer_record['DebtRatio'])
    q.page['row15'] = add_stat_card(box = '10 3 2 2', key = 'TotalCreditBalance', value = customer_record['TotalCreditBalance'])

    q.page['row21'] = add_chart(box = '3 5 4 4', title = "Global Credit Scores", plot_type='area')
    q.page['row22'] = add_chart(box = '7 5 5 4', title = "Global Feature Importance")

    q.page['row31'] = add_text_card(box = '3 9 9 -1', text = q.user.about_text) 

    q.page['row21'].data = [(x, y) for x, y in zip(q.user.dataset["CustomerID"], q.user.dataset['prediction'])][:100]
    q.page['row22'].data = [(x, y) for x, y in zip(q.user.fe["Original Feature"], q.user.fe['Relative Importance'])][:10]

    await q.page.save()
